
/*
  Sketch generated by the Arduino IoT Cloud Thing "EIoTK_Activity_08"
  https://create.arduino.cc/cloud/things/4c178f1c-a581-49bc-8123-4f6d8f21d4b2

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  float humidity;
  float temperature;
  CloudColoredLight rgbColor;
  int light;
  int moistValue;
  int threshold_dry;
  bool moisture_on;
  bool relay_1;
  bool relay_2;
  bool updateDisplay;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

/*
  Name: Renan Mougenot Breviglieri Silva
  Date: March 29th, 2022
  Title: Urban Farming - Improved
*/

/*THIS CODE WAS IMPROVED BY ME*/

//Import Libraries
#include "arduino_secrets.h"
#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>

//Carrier
MKRIoTCarrier carrier;

//Moisture Reader
int moistPin = A5; //On A5

//Relay
String relayState1 = ""; //1
String relayState2 = ""; //2

//LED Colors
uint32_t moist = carrier.leds.Color(231, 65, 255); //Blueish
uint32_t cool = carrier.leds.Color(248, 234, 92); //Yellowish

void setup() {

  Serial.begin(9600); //Set baud rate

  initProperties(); //Initialize properties

  ArduinoCloud.begin(ArduinoIoTPreferredConnection); //Start cloud

  CARRIER_CASE = false; //No case
  carrier.begin(); //Start carrier

  setDebugMessageLevel(4);   //Get Cloud Info/errors , 0 (only errors) up to 4
  ArduinoCloud.printDebugInfo();

  //Screen while there is no internet connection
  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Waiting For");
    carrier.display.setCursor(5, 110);
    carrier.display.println("Connection...");
    delay(500);
  }
}


void loop() {
  ArduinoCloud.update(); //Update cloud

  //Check relay 1
  if (relay_1 == true) {
    carrier.Relay1.open(); //Turn on relay
    relayState1 = "ON"; //Status
  }
  else {
    carrier.Relay1.close(); //Turn off relay
    relayState1 = "OFF"; //Status
  }

  //Check relay 2
  if (relay_2 == true) {
    carrier.Relay2.open(); //Turn on relay
    relayState2 = "ON"; //Status
  }
  else {
    carrier.Relay2.close(); //Turn off relay
    relayState2 = "OFF"; //Status
  }

  //Check if there is light
  if (carrier.Light.colorAvailable()) {
    int none;//not gonna be used (change for red, green, blue if wanted to)
    carrier.Light.readColor(none,  none,  none, light); //Read light color
  }

  temperature = carrier.Env.readTemperature(); //Read temperature
  humidity = carrier.Env.readHumidity(); //Read humidity

  int rawMoistValue = analogRead(moistPin); //Read moisture value
  moistValue = map(rawMoistValue, 0, 1023, 100, 0);  //map(value, fromLow, fromHigh, toLow, toHigh)

  //Check if the moisture checker is  on
  if(moisture_on == true){

    carrier.display.setCursor(90, 50); //Cursor
    carrier.display.fillScreen(ST77XX_WHITE); //White background
    carrier.display.setTextColor(ST77XX_RED); //Red text
    carrier.display.setTextSize(2); //Size

    //Check if the system is dryer than the threshold
    if(moistValue < threshold_dry){
      carrier.leds.fill(cool); //Color of the LED
      carrier.leds.setBrightness(moistValue); //Set brightness
      carrier.leds.show(); //Start LED
      carrier.display.print("Dry"); //Message display
      message = "Dry"; //Messenger notification
      carrier.display.fillCircle(120, 150, moistValue, 0xc91414); //Print a circle based on the moisture (y,x,size,color)
      delay(1000); //Delay
    }

    //Check if the system is wetter than the threshold
    if(moistValue > threshold_dry){
      carrier.leds.fill(moist); //Color of the LED
      carrier.leds.setBrightness(moistValue); //Set brightness
      carrier.leds.show(); //Start LED
      carrier.display.print("Moist"); //Message display
      message = "Moist"; //Messenger notification
      carrier.display.fillCircle(120, 150, moistValue, 0x675D); //Print a circle based on the moisture (y,x,size,color)
      delay(1000); //Delay

    }
  }
  //If the moisture check is off
  if(moisture_on == false){
    //If the system is wet, when it shoudln't be
    if(moistValue > threshold_dry){
    carrier.display.setCursor(0, 50); //Cursor
    carrier.display.fillScreen(ST77XX_WHITE); //White background
    carrier.display.setTextColor(ST77XX_RED); //Red text
    carrier.display.setTextSize(2); //Size
    message = "Something is wet when it shouldn't be!"; //Messenger notification
    carrier.display.print(message); //Message display
    carrier.Buzzer.sound(55); //Frequency chosen and start sound
    delay(1000); //Play sound for this long
    carrier.Buzzer.noSound(); //Turn off sound;
    }
  }
}


void onRelay1Change() {
  // Do something
}

void onRelay2Change() {
  // Do something
}

//RGB Colors
void onRgbColorChange() {
  uint8_t r, g, b; //Values of red, green and blue
  rgbColor.getValue().getRGB(r, g, b); //Get values for Colors

  //Check if it is on
  if (rgbColor.getSwitch()) {
    carrier.leds.fill(carrier.leds.Color(g, r, b), 0, 5); //Turn on LEDS to that color
    carrier.leds.show(); //Start LEDs
  }
  else {
    carrier.leds.fill(0, 0, 5); //Turn off LEDs
    carrier.leds.show();
  }
}

//Update display
void onUpdateDisplayChange() {

  carrier.leds.fill(0, 0, 5); //Turn off LEDs
  carrier.leds.show();

  // Do something
  carrier.display.fillScreen(ST77XX_WHITE); //White background
  carrier.display.setTextColor(ST77XX_RED); //Red text
  carrier.display.setTextSize(2); //Size

  carrier.display.setCursor(20, 30); //Cursor
  carrier.display.print("Temp: "); //Message
  carrier.display.print(temperature); //Print temperature
  carrier.display.print(" C"); //Message

  carrier.display.setCursor(20, 50); //Cursor
  carrier.display.print("Humi: "); //Message
  carrier.display.print(humidity); //Humidity
  carrier.display.print(" %"); //Message

  carrier.display.setTextColor(ST77XX_ORANGE); //Orange text
  carrier.display.setCursor(20, 70); //Cursor
  carrier.display.print("Light: "); //Message
  carrier.display.print(light); //Light

  carrier.display.setTextColor(ST77XX_BLUE); //Blue text
  carrier.display.setCursor(20, 90); //Cursor
  carrier.display.print("Moist: "); //Message
  carrier.display.print(moistValue); //Moisture
  carrier.display.print(" %"); //Message

  carrier.display.setTextColor(ST77XX_BLUE); //Blue text
  carrier.display.setCursor(20, 120); //Cursor
  carrier.display.print("R1: "); //Message
  carrier.display.print(relayState1); //Relay 1

  carrier.display.print(" R2: "); //Message
  carrier.display.print(relayState2); //Relay 2

  updateDisplay = false; //Turn off switch
}


/*
  Since MoistureOn is READ_WRITE variable, onMoistureOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMoistureOnChange()  {

  }


/*
  Since ThresholdDry is READ_WRITE variable, onThresholdDryChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onThresholdDryChange()  {
  // Add your code here to act upon ThresholdDry change
}
