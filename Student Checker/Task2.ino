/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create-dev.arduino.cc/cloud/things/7d0dbf29-370e-42a6-bb94-8fc1ec2aa3a2

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  float gyro_y;
  int confirmed;
  int counter;
  int number_of_students;
  bool doorChange;
  bool message_on;
  bool on;
  bool reset_counter;
  bool students_checker;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

/*
  Name: Renan Mougenot Breviglieri Silva
  Date: March 16th, 2022
  Title: Classroom Tracker Improved
*/

/*THIS CODE WAS IMPROVED BY ME*/

//Import libraries
#include "thingProperties.h"
#include "arduino_secrets.h"
#include "pitches.h"
#include <Arduino_MKRIoTCarrier.h>

//Initialize carrier
MKRIoTCarrier carrier;

//PIR
int pir = A5; //Set pin
int pirState = LOW; //Start it as

//Gyroscope
float gyro_x; //X
float gyro_z; //Y

//LED Colors
uint32_t Green = carrier.leds.Color(255, 0, 0);  //Green
uint32_t Blue = carrier.leds.Color(0, 0, 255);   //Blue
uint32_t Red = carrier.leds.Color(0, 255, 0);   //Red
uint32_t off = carrier.leds.Color(0, 0, 0); //Int to turn off the LEDs
int green = 0; //Green variable
int red = 0; //Red variable
int blue = 0; //Blue variable

void setup() {

  Serial.begin(9600); //Set Baud Rate

  pinMode(pir, INPUT); //Initialize PIR

  initProperties(); //Initialize things properties

  ArduinoCloud.begin(ArduinoIoTPreferredConnection); //Check Arduino Cloud Connection

  CARRIER_CASE = false; //No case
  carrier.begin(); //Start carrier

  //Initialize the numbers at 0
  confirmed = 0; //Confirmed
  number_of_students = 0; //Number of students

  setDebugMessageLevel(4);   //Get Cloud Info/errors
  ArduinoCloud.printDebugInfo(); //Print debug

  //Check internet connection
  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Waiting For");
    carrier.display.setCursor(5, 110);
    carrier.display.println("Connection...");
    delay(500);
  }
  carrier.display.fillScreen(ST77XX_BLACK); //Black background
}

void loop() {

  //Check if it is to turn on the system
  if(on){

  ArduinoCloud.update(); //Get arduino cloud information

  carrier.Buttons.update(); //Update buttons

  carrier.IMUmodule.readGyroscope(gyro_x, gyro_y, gyro_z); //Read the rotation values on the three axis
  pirState = digitalRead(pir); //Read the values sent from the pir sensor

  //Check gyroscope to see if it not set
  if(gyro_y == 0)
  {
    doorChange = false; //Don't count start the door counter
    carrier.display.setCursor(50, 100); //Set the cursor at position x=20, y=150
    carrier.display.print("Door Closed"); //Display message
    carrier.leds.fill(Red, 0, 5);  //Red LEDs
    carrier.leds.show(); //Start LEDs
  }

  else{
    doorChange = true; //Don't count start the door counter
    
    //Check if it is the student checker setting
    if (students_checker) {

      //If it was confirmed, start setting
      if (confirmed == 1){

        //Check if there is activity
        if (pirState == HIGH) {

              //If the person wants to display welcome messages
              if (message_on) {
                carrier.display.fillScreen(ST77XX_BLACK); //Black background
                carrier.display.setTextColor(ST77XX_WHITE); //White text
                display_hello(); //Call function to display random message
              }
              //If the person doesn't want welcome messages
              else{
                reset(); //Reset display
              }

            counter += 1; //Incremement counter
            }

            //If there is no movement
            else {

              int missing = (number_of_students - counter); //Calculate the number of missing students

              carrier.display.setTextSize(2); //Set the size of the text to 2
              carrier.display.setCursor(0, 100); //Set the cursor at position x=20, y=150
              carrier.display.print("Missing "); //Display message
              carrier.display.print(missing); //Display message
              carrier.display.println(" Students ");
            }

            //If all students are there
            if (counter == number_of_students) {

              //Generate random colors for LEDs
              green = random(255); //Green variable
              red = random(255); //Red variable
              blue = random(255); //Blue variable

              uint32_t random = carrier.leds.Color(green, red, blue); //Int to create the random color for the LEDs

              carrier.leds.fill(random, 0, 5);  //Random colors LEDs
              carrier.leds.show(); //Start LEDs

              carrier.display.setCursor(0, 100); //Set the cursor at position x=20, y=150
              carrier.display.println("All Students Here"); //Display message

              song(); //Play song
              students_checker = false; //Turn of student checker
            }
            carrier.Buzzer.noSound(); //Stop sound
            carrier.leds.fill(off, 0, 5);  //Red LEDs
            carrier.leds.show(); //Start LEDs
          }
          //If there is no confirmation
          else{
            set_students(); //Call function to set the students
          }
      }

      //If the student checker is off
      else{

        //Reset values
        number_of_students = 0; //Number of students
        confirmed = 0; //Confirmation

        //If the PIR noticed movement
        if (pirState == HIGH) {
          //Check if the person wants to display welcome messages
          if (message_on) {
            carrier.display.fillScreen(ST77XX_BLACK); //Black background
            carrier.display.setTextColor(ST77XX_WHITE); //White text
            display_hello(); //Function to display random messages
          }

          //If the person doesn't want to display welcome messages
          else{
            reset(); //Reset display
          }

          counter += 1; //Incremement counter

          //If movement is detected after opening the door
          carrier.leds.fill(Blue, 0, 5); //Blue LEDs
          carrier.leds.show(); //Start LEDs
        }

        //If there is no movement
        else {
          //If movement is detected after opening the door
          carrier.leds.fill(Green, 0, 5); //Blue LEDs
          carrier.leds.show(); //Start LEDs
        }
      }
    }
      delay(500); //Delay
    }

    //If the system is off
    else{
      reset(); //Reset display
      ArduinoCloud.update(); //Get arduino cloud information
      carrier.leds.fill(off, 0, 5);  //Turn off LEDs
      carrier.leds.show(); //Start LEDs
    }
}

//In case the reset button has been pressed
void onResetCounterChange() {

  counter = 0; //Reset counter

  carrier.Buzzer.sound(1000); //Start buzzer

  delay(10); //Play for 0.5 second
  carrier.Buzzer.noSound(); //Stop sound

  reset_counter = false; //Reset boolean
}

//Function to display random messages
void display_hello() {

  carrier.display.setCursor(0, 100); //Set the cursor at position x=20, y=150
  carrier.display.setTextSize(3); //Set the size of the text to 3

  int random_choice = random(10); //Choose message randomly

  //Handle random number
  switch (random_choice) {

    case 0:
      carrier.display.setTextSize(3); //Set the size of the text to 3
      message = "Hello!";
      carrier.display.println(message); //Display message
      break;
    case 1:
      carrier.display.setTextSize(2); //Set the size of the text to 2
      message = "Have a Good Day!";
      carrier.display.println(message); //Display message
      break;
    case 2:
      carrier.display.setTextSize(2); //Set the size of the text to 2
      message = "Smile! It's a Good  Day.";
      carrier.display.println(message); //Display message
      break;
    case 3:
      carrier.display.setTextSize(3); //Set the size of the text to 3
      message = "Good Morning!";
      carrier.display.println(message); //Display message
      break;
    case 4:
      carrier.display.setTextSize(2); //Set the size of the text to 2
      message = "Top of The Morning  to Ya!";
      carrier.display.println(message); //Display message
      break;
    case 5:
      carrier.display.setTextSize(2); //Set the size of the text to 2
      message = "Bora Que o Dia Ta   Bonito!";
      carrier.display.println(message); //Display message
      break;
    case 6:
      carrier.display.setTextSize(2); //Set the size of the text to 2
      message = "Enjoy Your Day!";
      carrier.display.println(message); //Display message
      break;
    case 7:
      carrier.display.setTextSize(3); //Set the size of the text to 3
      message = "Bom Dia!";
      carrier.display.println(message); //Display message
      break;
    case 8:
      carrier.display.setTextSize(3); //Set the size of the text to 3
      message = "Have Fun!";
      carrier.display.println(message); //Display message
      break;
    case 9:
      carrier.display.setTextSize(2); //Set the size of the text to 2
      message = "Receba! Luva de Pedreiro Melhor do Mundo";
      carrier.display.println(message); //Display message
      break;
  }
}

//Function to set the number of students
void set_students() {
    carrier.leds.fill(off); //No light
    carrier.leds.show(); //Show light

    //Reset Values
    confirmed = 0; //Confirmation
    counter = 0; //Counter

    carrier.display.setTextSize(1); //Set the size of the text to 1
    carrier.display.setCursor(0, 50); //Set the cursor at position x=20, y=150
    carrier.display.println("Set Number Of Students"); //Display message

    //If button 0 is pressed, increase by 1
    if (carrier.Buttons.onTouchDown(TOUCH0)) {
      reset(); //Reset display
      carrier.display.setCursor(50, 80); //Set the cursor at position x=20, y=150
      carrier.display.println("Increasing By 1"); //Display message
      number_of_students++;
      carrier.display.setCursor(70, 110); //Set the cursor at position x=20, y=150
      carrier.display.println(number_of_students); //Display message
    }
    //If button 1 is pressed, increase by 5
    if (carrier.Buttons.onTouchDown(TOUCH1)) {
      reset(); //Reset display
      carrier.display.setCursor(50, 80); //Set the cursor at position x=20, y=150
      carrier.display.println("Increasing By 5"); //Display message
      number_of_students += 5;
      carrier.display.setCursor(70, 110); //Set the cursor at position x=20, y=150
      carrier.display.println(number_of_students); //Display message
    }
    //If button 2 is pressed, decrease by 1
    if (carrier.Buttons.onTouchDown(TOUCH2)) {
      reset(); //Reset display
      carrier.display.setCursor(50, 80); //Set the cursor at position x=20, y=150
      carrier.display.println("Decreasing By 1"); //Display message
      number_of_students--;
      carrier.display.setCursor(70, 110); //Set the cursor at position x=20, y=150
      carrier.display.println(number_of_students); //Display message
    }
    //If button 3 is pressed, decrease by 5
    if (carrier.Buttons.onTouchDown(TOUCH3)) {
      reset(); //Reset display
      carrier.display.setCursor(50, 80); //Set the cursor at position x=20, y=150
      carrier.display.println("Decreasing By 5"); //Display message
      number_of_students  -= 5;
      carrier.display.setCursor(70, 110); //Set the cursor at position x=20, y=150
      carrier.display.println(number_of_students); //Display message
    }
    //If button 4 is pressed, confirm number of students
    if (carrier.Buttons.onTouchDown(TOUCH4)) {
      reset(); //Reset display
      carrier.display.setCursor(50, 80); //Set the cursor at position x=20, y=150
      carrier.display.println("Confirmed"); //Display message
      confirmed  = 1; //Confirm
      reset(); //Reset display
    }
  }

//Function to play the song
void song() {
  //Notes in the melody:
  int melody[] = {
    NOTE_AS4, NOTE_AS4, NOTE_A4, NOTE_G4, NOTE_AS4,
    0, NOTE_AS4, NOTE_AS4, NOTE_A4, NOTE_G4,
    NOTE_AS4, NOTE_A4, NOTE_G4, NOTE_A4, 0,
    NOTE_G4, NOTE_F4, NOTE_G4, 0,
    NOTE_F4, NOTE_D4, NOTE_F4, NOTE_D4, NOTE_F4, NOTE_G4
  };

  //Note durations:
  int durations[] = {
    8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8
  };

  //Iterate over the notes of the melody
  for (int notes = 0; notes < 26; notes++) {

    int duration = 1000 / durations[notes]; //Calculate duration of each note
    carrier.Buzzer.sound(melody[notes]); //Play song
    delay(duration); //Delay

    int pause = duration * 1.30; //Calculate pause between notes
    delay(pause); //Delay

    carrier.Buzzer.noSound(); //Stop playing
  }

}

//Function to reset display
void reset(){
  carrier.display.fillScreen(ST77XX_BLACK); //Black background
  carrier.display.setTextColor(ST77XX_WHITE); //White text
}


/*
  Since MessageOn is READ_WRITE variable, onMessageOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageOnChange()  {
}


/*
  Since StudentsChecker is READ_WRITE variable, onStudentsCheckerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onStudentsCheckerChange()  {
  // Add your code here to act upon StudentsChecker change
}

/*
  Since On is READ_WRITE variable, onOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOnChange()  {
  // Add your code here to act upon On change
}
